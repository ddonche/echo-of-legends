import {names} from data

act starter_gear(class) 
  judge using class
    == "Warrior": [
      { id: "sword", name: "sword", type: "weapon", slot: "weapon", properties: { damage: "1d6", description: "A basic sword." } },
      { id: "shield", name: "shield", type: "armor", slot: "offhand", properties: { description: "A wooden shield." } },
      { id: "armor", name: "armor", type: "armor", slot: "body", properties: { description: "Leather armor." } }
    ]
    == "Mage": [
      { id: "staff", name: "staff", type: "weapon", slot: "weapon", properties: { damage: "1d4", description: "A wooden staff." } },
      { id: "robe", name: "robe", type: "armor", slot: "body", properties: { description: "Simple robes." } },
      { id: "spellbook", name: "spellbook", type: "item", properties: { description: "A basic spellbook." } }
    ]
    == "Rogue": [
      { id: "dagger", name: "dagger", type: "weapon", slot: "weapon", properties: { damage: "1d4", description: "A sharp dagger." } },
      { id: "cloak", name: "cloak", type: "armor", slot: "body", properties: { description: "A dark cloak." } },
      { id: "lockpick", name: "lockpick", type: "item", properties: { description: "Thieves' tools." } }
    ]
    else: [
      { id: "stick", name: "stick", type: "weapon", slot: "weapon", properties: { damage: "1d2", description: "A sturdy stick." } }
    ]
  end
end

/// Roll a block of classic RPG stats
act roll_stats
  health = roll 3d6+6
  strength = roll 3d6
  magic = roll 3d6
  agility = roll 3d6
  return health, strength, magic, agility
end

/// Full hero generator
act create_hero
  hero_name = names::get_name()
  hero_class = names::get_class()
  hero_stats = roll_stats()
  hero_inventory = starter_gear(hero_class)
  
  new_hero = {
    name: hero_name,
    class: hero_class,
    stats: hero_stats,
    inventory: hero_inventory,
    max_inventory: 10,
    equipped: { weapon: nil }
  }
  
  return new_hero
end

/// Create the hero at startup
hero = create_hero()

/// helper actions
act get_hero
    return hero
end

act get_hero_health
    return hero >> stats >> health
end

act get_hero_weapon
    return hero >> equipped >> weapon
end

act get_hero_strength
    return hero >> stats >> strength
end

act get_hero_inventory
    return hero >> inventory
end

/// Display function
act show_hero
  say "=== Your Hero ==="
  say hero >> name ++ "the" ++ hero >> class
  say "Health:" ++ hero >> stats >> health
  say "Strength:" ++ hero >> stats >> strength
  say "Magic:" ++ hero >> stats >> magic
  say "Agility:" ++ hero >> stats >> agility
  /// say "Inventory:" ++ hero >> inventory
end

act show_inventory
  inv_len = hero >> inventory.len
  say "=== Inventory (" + inv_len + "/" + hero >> max_inventory + ") ==="
  
  if inv_len == 0
    say "Your pack is empty."
    return
  end
  
  for item in hero >> inventory
    say "  -" ++ item >> name
  end
end

/// Add item to inventory
act add_to_inventory(item)
  if hero >> inventory.len >= hero >> max_inventory
    say "Your pack is full! Drop or use something first."
    return false
  end
  
  /// Use put_last! mutation
  put_last!(hero >> inventory, item)
  return true
end

/// Remove item from inventory by ID
act remove_from_inventory(item_id)
  /// Find the item and its index
  item = nil
  item_index = -1
  i = 0
  for potential_item in hero >> inventory
    if potential_item >> id == item_id
      item = potential_item
      item_index = i
      stop
    end
    i = i + 1
  end
  
  if item == nil
    return nil
  end
  
  delete_at!(hero >> inventory, item_index) <---- using ! for mutation
  return item
end

/// Equip weapon
act equip_weapon(item_id)
  /// Find item in inventory
  item = nil
  for i in hero >> inventory
    if i >> id == item_id
      item = i
      stop
    end
  end
  
  if item == nil
    say "You don't have that item."
    return false
  end
  
  if item >> type != "weapon"
    say "You can't equip that."
    return false
  end
  
  /// Unequip current weapon if any
  if hero >> equipped >> weapon != nil
    say "You unequip:" ++ hero >> equipped >> weapon >> name
  end
  
  /// Equip new weapon - use update_at! for mutation
  equipped_map = hero >> equipped
  update_at!(equipped_map, "weapon", item)
  update_at!(hero, "equipped", equipped_map)
  
  say "You equipped:" ++ item >> name
  say "Damage:" ++ item >> properties >> damage
  
  return true
end

/// Use consumable
act use_item(item_id)
    /// Find item in inventory
    item = nil
    item_index = -1
    i = 0
    for potential_item in hero >> inventory
        if potential_item >> id == item_id
            item = potential_item
            item_index = i
            stop
        end
        i = i + 1
    end
    
    if item == nil
        say "You don't have that item."
        return false
    end
    
    if item >> type != "consumable"
        say "You can't use that."
        return false
    end
    
    /// Apply healing if it has the property
    props = item >> properties
    /// Check if heal property exists (it will be nil if not)
    if props >> heal != nil
        heal_amount = roll_str(props >> heal)
        new_health = hero >> stats >> health + heal_amount
        
        /// Mutate the hero's health
        stats_map = hero >> stats
        update_at!(stats_map, "health", new_health)
        update_at!(hero, "stats", stats_map)
        
        say "You used" ++ item >> name ++ "and healed" ++ heal_amount ++ "HP."
        say "Current health:" ++ new_health
    end
    
    /// Remove from inventory using delete_at!
    delete_at!(hero >> inventory, item_index)
    
    return true
end

/// Show equipment
act show_equipment
  say "=== Equipment ==="
  
  if hero >> equipped >> weapon != nil
    weapon = hero >> equipped >> weapon
    say "Weapon:" ++ weapon >> name
    say "  Damage:" ++ weapon >> properties >> damage
    say "  " ++ weapon >> properties >> description
  else
    say "Weapon: None (fighting unarmed)"
  end
end

/// Drop item from inventory
act drop_item(item_id)
  item = remove_from_inventory(item_id)
  if item != nil
    return item
  else
    say "You don't have that item."
    return nil
  end
end

/// Damage the hero (called from combat)
act damage_hero(amount)
    new_health = hero >> stats >> health - amount
    stats_map = hero >> stats
    update_at!(stats_map, "health", new_health)
    update_at!(hero, "stats", stats_map)
end

act rebirth
    say "==================================="
    say "   A NEW BEGINNING"
    say "==================================="
    say ""
    
    /// Generate new hero
    new_hero = create_hero()
    
    /// Replace the global hero
    hero [= new_hero  <---- SHADOWED
    
    /// Show the new hero
    show_hero()
    say ""
    say "A new hero rises..."
    say ""
end